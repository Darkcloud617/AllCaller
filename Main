import os
import sys
import subprocess
import time
import logging
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Config
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SMTP_USER = 'A@gmail.com'   #enter email     
SMTP_PASSWORD = os.environ.get('afdh zask orpm hqxc')  

RECIPIENTS = ['B@gmail.com', 'B@trynorthpoint.com'] #enter recipients
EMAIL_SUBJECT = 'Automation Script Error Notification'

MAX_ATTEMPTS = 3          # Maximum number of retries
TIMEOUT_SECONDS = 300     # Timeout for execution (in seconds)
LOG_FILENAME = 'execution_log.txt'  # Log

def send_email(subject, body, attachments=None):
    msg = MIMEMultipart()
    msg['From'] = SMTP_USER
    msg['To'] = ', '.join(RECIPIENTS)
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    if attachments:
        for attachment_path in attachments:
            if os.path.exists(attachment_path):
                with open(attachment_path, 'rb') as f:
                    attachment = MIMEText(f.read(), 'base64', 'utf-8')
                    attachment.add_header('Content-Disposition', 'attachment', filename=os.path.basename(attachment_path))
                    msg.attach(attachment)
            else:
                logging.warning(f"Attachment not found: {attachment_path}")

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.sendmail(SMTP_USER, RECIPIENTS, msg.as_string())
        server.quit()
        logging.info(f"Email sent successfully to {RECIPIENTS}")
    except Exception as e:
        logging.error(f"Failed to send email: {e}")

def log_separator():
    logging.info('\n' + '=' * 80)
    logging.info(f"Execution started on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logging.info('=' * 80 + '\n')

def main():
    # Set log
    script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    log_file_path = os.path.join(script_directory, LOG_FILENAME)
    logging.basicConfig(
        filename=log_file_path,
        filemode='a',
        format='%(asctime)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    log_separator()

    # List all directory files
    exe_files = [f for f in os.listdir(script_directory) if f.endswith('.exe') and os.path.isfile(os.path.join(script_directory, f))]

    # Exclude parent
    script_name = os.path.basename(sys.argv[0])
    exe_files = [f for f in exe_files if f != script_name]

    for exe_file in exe_files:
        logging.info(f"Starting execution of {exe_file}")
        attempts = 0
        success = False

        while attempts < MAX_ATTEMPTS and not success:
            attempts += 1
            logging.info(f"Attempt {attempts} for {exe_file}")

            try:
                # Run with timeout
                start_time = time.time()
                process = subprocess.Popen(
                    [os.path.join(script_directory, exe_file)],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )

                try:
                    stdout, stderr = process.communicate(timeout=TIMEOUT_SECONDS)
                except subprocess.TimeoutExpired:
                    process.kill()
                    stdout, stderr = process.communicate()
                    logging.error(f"{exe_file} timed out after {TIMEOUT_SECONDS} seconds.")
                    logging.error(f"Stdout: {stdout}")
                    logging.error(f"Stderr: {stderr}")
                    continue  # Retry

                return_code = process.returncode
                elapsed_time = time.time() - start_time

                if return_code == 0:
                    logging.info(f"{exe_file} completed successfully in {elapsed_time:.2f} seconds.")
                    success = True
                else:
                    logging.error(f"{exe_file} failed with return code {return_code} in {elapsed_time:.2f} seconds.")
                    logging.error(f"Stdout: {stdout}")
                    logging.error(f"Stderr: {stderr}")
            except Exception as e:
                logging.error(f"Unexpected error while running {exe_file}: {e}")

        if not success:
            logging.error(f"{exe_file} failed after {MAX_ATTEMPTS} attempts.")
            email_body = (
                f"The executable '{exe_file}' failed after {MAX_ATTEMPTS} attempts.\n" #send email
                f"Please find the attached log file for more details."
            )
            # Attach the log
            attachments = [log_file_path]
            exe_log_file = exe_file.replace('.exe', '.log')
            exe_log_path = os.path.join(script_directory, exe_log_file)
            if os.path.exists(exe_log_path):
                attachments.append(exe_log_path)

            send_email(EMAIL_SUBJECT, email_body, attachments)

    logging.info('\n' + '=' * 80)
    logging.info(f"Execution ended on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logging.info('=' * 80 + '\n')

if __name__ == "__main__":
    main()
